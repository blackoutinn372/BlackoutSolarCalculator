/**
  * @author Sen, Court
  */
package com.blackout.solarpanelcalculator.client;
import java.text.DecimalFormat;
import java.util.Arrays; // Used for "contains" for verifying orientations and angles.





public class SolarPanel {
	public static final String[] okOrientations = {"North", "North east/west", "Due east/west" };
	public static final String[] okAngles = { "Flat", "Normal", "Steep" };
	
	/*Roof angle efficiencies*/
	public static final double flat = 0.81;
	public static final double normal = 0.893;
	public static final double steep = 0.9;
	
	/*Orientation efficiencies*/
	public static final double north = 0.95;
	public static final double north_east_west = 0.9;
	public static final double east_west = 0.85;
	
	public static final double inverter = 0.96; //inverter efficiency
	
	public static final double percentageToGrid = 0.5; //assume 50% of power generated by solar panels goes to power grid
													   //not used here, for near future
	
	public static final double panelAgeLoss = 0.007;//solarpanels lose 0.70 efficiency per year,not used here, for near future 
	
	DecimalFormat twoDForm = new DecimalFormat("#.##");
	
	private double sunlight;//in hours
	private double systemSize ;// in kw
	private String roofAngle;// flat,normal,or Steep
	private String orientation;//north,north east/west, or  east/west
	
	public SolarPanel (double sunlight,double systemSize,String roofAngle,String orientation) throws SolarPanelException{
		
	 if (sunlight <=0)
		 throw new SolarPanelException("Invalid sunlight hours");
	 if (systemSize <= 0)
		 throw new SolarPanelException("Invalid system size");
	 if(!Arrays.asList(okAngles).contains(roofAngle))
		 throw new SolarPanelException("Invalid roofAngle selection");
	 if (!Arrays.asList(okOrientations).contains(orientation)) 
		 throw new SolarPanelException("Invalid orientation selection");
	 this.sunlight = sunlight;
	 this.systemSize = systemSize;
	 this.roofAngle = roofAngle;
	 this.orientation = orientation;
	}
	/* Nothing specified so use defaults */
	public SolarPanel() {
		sunlight = 5;
		systemSize = 5;
		roofAngle = okAngles[0];
		orientation = okOrientations[0];
	}

	
//daily
	public double getDailyPowerGeneration(){
		double powerGeneration = systemSize * sunlight * inverter *roofAngleEfficiency()*orientationEfficiency();
		
		return Double.valueOf(twoDForm.format(powerGeneration));
	}
//	weekly
	public double getWeeklyPowerGeneration(){
		double weeklyGeneration = getDailyPowerGeneration() * 7;
		
		return Double.valueOf(twoDForm.format(weeklyGeneration));
	}
	
//	monthly
	public double getMonthlyPowerGeneration(String month){
		double monthGeneration = Month.valueOf(month).GetMonthGeneration()*this.systemSize;
		return Double.valueOf(twoDForm.format(monthGeneration));
	}
	
//	four seasons
	public double getSummerPowerGeneration(){
		double summerGeneration = Month.GetSummerGeneration() * this.systemSize;
		return Double.valueOf(twoDForm.format(summerGeneration));
	}
	public double getAutumnPowerGeneration(){
		double autumnGeneration = Month.GetAutumnGeneration() * this.systemSize;
		return Double.valueOf(twoDForm.format(autumnGeneration));
	}
	public double getWinterPowerGeneration(){
		double winterGeneration = Month.GetWinterGeneration() * this.systemSize;
		return Double.valueOf(twoDForm.format(winterGeneration));
	}
	public double getSpringPowerGeneration(){
		double springGeneration = Month.GetSpringGeneration() * this.systemSize;
		return Double.valueOf(twoDForm.format(springGeneration));
	}
	
//	yearly
	public double GetYearPowerGeneration(){
		double yearGeneration = getDailyPowerGeneration() * 365;
		return Double.valueOf(twoDForm.format(yearGeneration));
	}
//	output results daily
	public String toStringDaily(){
		return "Your system can generate " +getDailyPowerGeneration() +" kws per day";
		
	}
//	weekly
	public String toStringWeekly(){
		return "Your system can generate "+getWeeklyPowerGeneration()+" kws in a week";
	}
//	monthly
	public String toStringMonthly(){
		return "Your system can generate\n"+ getMonthlyPowerGeneration("January") +" kws in January\n"
											+ getMonthlyPowerGeneration("February")+" kws in February\n"
											+ getMonthlyPowerGeneration("March")+" kws in March\n"
											+ getMonthlyPowerGeneration("April")+" kws in April\n"
											+ getMonthlyPowerGeneration("May")+" kws in May\n"
											+ getMonthlyPowerGeneration("June")+" kws in June\n"
											+ getMonthlyPowerGeneration("July")+" kws in July\n"
											+ getMonthlyPowerGeneration("August")+ " kws in August\n"
											+ getMonthlyPowerGeneration("September")+" kws in September\n"
											+ getMonthlyPowerGeneration("October")+" kws in October\n"
											+ getMonthlyPowerGeneration("November")+" kws in November\n"
											+ getMonthlyPowerGeneration("December")+" kws in December\n";
	}
//	seasonly
	public String toStringSeasonly(){
		return "Your system can generate\n"+getSummerPowerGeneration() +" kws in Summer\n"
											+getAutumnPowerGeneration()+" kws in Autumn\n"
											+getWinterPowerGeneration()+" kws in Winter\n"
											+getSpringPowerGeneration()+" kws in Spring\n";
	}
//	yearly
	public String toStringYearly(){
		return "Your system can generate\n "+GetYearPowerGeneration() +" kws in a year";
	}
	
	
	private double roofAngleEfficiency(){
		if(roofAngle =="Flat")
			return flat;
		if (roofAngle =="Normal")
			return normal;
		else return steep;
	}
	private double orientationEfficiency(){
		if (orientation =="North")
			return north;
		if (orientation =="North east/west")
			return north_east_west;
		else return east_west;
	}
}
