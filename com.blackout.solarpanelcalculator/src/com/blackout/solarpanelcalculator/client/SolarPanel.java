/**
  * @author Sen, Court
  */
package com.blackout.solarpanelcalculator.client;
import java.text.DecimalFormat;
import java.util.Arrays; // Used for "contains" for verifying orientations and angles.





public class SolarPanel {
	public static final String[] okOrientations = {"North", "North east/west", "Due east/west" };
	public static final String[] okAngles = { "Flat", "Normal", "Steep" };
	
	/*Roof angle efficiencies*/
	public static final double flat = 0.81;
	public static final double normal = 0.893;
	public static final double steep = 0.9;
	
	/*Orientation efficiencies*/
	public static final double north = 0.95;
	public static final double north_east_west = 0.9;
	public static final double east_west = 0.85;
	
	public static final double inverter = 0.96; //inverter efficiency
	
	public static final double percentageToGrid = 0.5; //assume 50% of power generated by solar panels goes to power grid
													   //not used here, for near future
	
	public static final double panelAgeLoss = 0.007;//solarpanels lose 0.70 efficiency per year,not used here, for near future 
	
	DecimalFormat twoDForm = new DecimalFormat("#.##");
	
	private double sunlight;//in hours
	private double systemSize ;// in kw
	private String roofAngle;// flat,normal,or Steep
	private String orientation;//north,north east/west, or  east/west
	
	public SolarPanel (double sunlight,double systemSize,String roofAngle,String orientation) throws SolarPanelException{
		
	 if (sunlight <=0)
		 throw new SolarPanelException("Invalid sunlight hours");
	 if (systemSize <= 0)
		 throw new SolarPanelException("Invalid system size");
	 if(!Arrays.asList(okAngles).contains(roofAngle))
		 throw new SolarPanelException("Invalid roofAngle selection");
	 if (!Arrays.asList(okOrientations).contains(orientation)) 
		 throw new SolarPanelException("Invalid orientation selection");
	 this.sunlight = sunlight;
	 this.systemSize = systemSize;
	 this.roofAngle = roofAngle;
	 this.orientation = orientation;
	}
	/* Nothing specified so use defaults */
	public SolarPanel() {
		sunlight = 5;
		systemSize = 5;
		roofAngle = okAngles[0];
		orientation = okOrientations[0];
	}

	

	public double getPowerGeneration(){
		double powerGeneration = systemSize * sunlight * inverter *roofAngleEfficiency()*orientationEfficiency();
		
		return Double.valueOf(twoDForm.format(powerGeneration));
	}
	
//	output results
	public String toString(){
		return "Your system can generate " +getPowerGeneration() +" kws per day";
		
	}
	
	private double roofAngleEfficiency(){
		if(roofAngle =="Flat")
			return flat;
		if (roofAngle =="Normal")
			return normal;
		else return steep;
	}
	private double orientationEfficiency(){
		if (orientation =="North")
			return north;
		if (orientation =="North east/west")
			return north_east_west;
		else return east_west;
	}
}
